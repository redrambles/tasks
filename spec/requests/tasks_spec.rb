require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/tasks", type: :request do
  let(:valid_attributes_status_true) {
    {title: "Do the laundry", due_date: 1.day.from_now, status: true}
  }

  let(:valid_attributes_status_false) {
    {title: "Do the laundry", due_date: 1.day.from_now, status: false}
  }

  let(:invalid_attributes) {
    {title: nil, due_date: nil, status: nil}
  }

  describe "GET /index" do
    it "renders a successful response with a status of true" do
      task = Task.create! valid_attributes_status_true
      get tasks_url
      expect(response).to be_successful
      expect(response.body).to include(task.title)

    end

    it "renders a successful response with a status of false" do
      task = Task.create! valid_attributes_status_false
      get tasks_url
      expect(response).to be_successful
      expect(response.body).to include(task.title)
    end
  end

  describe "POST /create" do
    context "with valid parameters and status of true" do
      it "creates a new Task" do
        expect {
          post tasks_url, params: valid_attributes_status_true, as: :json

        }.to change(Task, :count).by(1)
      end

      it "renders the appropriate http status with a created task" do
        post tasks_url, params: valid_attributes_status_true, as: :json
        expect(response).to have_http_status(201)
      end

      it "renders the appropriate JSON response with a created task" do
        post tasks_url, params: valid_attributes_status_true, as: :json

        json_response = JSON.parse(response.body)

        expect(json_response).to be_a(Hash)
        expect(json_response).to have_key('title')
      end

      context "with valid parameters and status of false" do
        it "creates a new Task" do
          expect {
            post tasks_url, params: valid_attributes_status_false, as: :json
  
          }.to change(Task, :count).by(1)
        end
  
        it "renders the appropriate http status with a created task" do
          post tasks_url, params: valid_attributes_status_false, as: :json
          expect(response).to have_http_status(201)
        end
  
        it "renders the appropriate JSON response with a created task" do
          post tasks_url, params: valid_attributes_status_false, as: :json
  
          json_response = JSON.parse(response.body)
  
          expect(json_response).to be_a(Hash)
          expect(json_response).to have_key('title')
        end
      end
    end

    context "with invalid parameters" do
      it "does not create a new Task" do
        expect {
          post tasks_url, params: { task: invalid_attributes }
        }.to change(Task, :count).by(0)
      end

      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post tasks_url, params: { task: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end

    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        {title: "My updated task", due_date: 1.week.from_now, status: true}
      }

      it "updates the requested task" do
        task = Task.create! valid_attributes_status_true
        patch task_url(task), params: {task: new_attributes }
        task.reload

        expect(task.title).to eq(new_attributes[:title])
        expect(task).to be_valid
      end

      it "renders the appropriate JSON response" do
        task = Task.create! valid_attributes_status_true
        patch task_url(task), params: { task: new_attributes }, as: :json
        task.reload
        json_response = JSON.parse(response.body)
        expect(json_response).to be_a(Hash)
        expect(json_response).to have_key('title')
        expect(json_response['title']).to eq(new_attributes[:title])
      end
    end

    context "with invalid parameters" do
      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        task = Task.create! valid_attributes_status_true
        patch task_url(task), params: { task: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

end
